For now it's an x86 impementation of the SPU intrinsics, mainly as a practice with SSE.

It was a basic SPU interpreter before, but that got dumped. Still lots of old junk left to be cleaned up.


Projects
- Turn SPU ELF file into compilable cpp file
- Implement SPU intrinsics


SPU steps:

- Load binary from ELF file
	- Load whole image into memory
	- Load executable part separately

- Preprocess executable
	- Find entry point of statically called functions
	- Isolate and remove non-executable part at the end
	
- Build basic blocks
	- Between entry points


Possible SPU optimizations:

- Turn pseudeo-assignments ( ADDing 0, ORing 0, etc. ) into normal assignments

- Turn pseudo-setzeros ( FSMBI( 0 ), etc. ) into direct setzeros

- Remove stack instructions ( almost everything that uses GPR1 )

ASSUMPTIONS:

* IP here is instr_addr / 4
* LNOP's IP is always odd
* NOP's IP is always even
* returns (bi $0) with and even IP are always followed by LNOP

FUNCTION ENDINGS:

* must be an unconditional branch instruction 
* must be at SCOPE_DEPTH 0
* right before the next function entry
* right before EOF ( should close earlier than that anyway )
* return (bi $0; bi** $*, $0)
* negative static jump (br -***) into function body
* negative static jump (br -***) before the first intruction of the function
* positive static jump (br ***) 
* fn entries are 8 byte aligned, padding done with LNOP 
